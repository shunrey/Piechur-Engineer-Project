{"version":3,"sources":["ng://ngx-quill/src/quill-editor.component.ts","ng://ngx-quill/src/quill.module.ts"],"names":["Quill","QuillEditorComponent","elementRef","domSanitizer","doc","platformId","renderer","zone","config","_this","this","emptyArray","format","readOnly","sanitize","style","strict","customOptions","onEditorCreated","EventEmitter","onContentChanged","onSelectionChanged","disabled","valueGetter","quillEditor","editorElement","html","children","innerHTML","modelValue","getText","getContents","JSON","stringify","e","valueSetter","value","SecurityContext","HTML","clipboard","convert","parse","insert","defaultModules","modules","prototype","ngAfterViewInit","isPlatformServer","require","toolbarElem","nativeElement","querySelector","placeholder","undefined","trim","insertAdjacentHTML","editorElem","Object","keys","forEach","key","setStyle","customOption","newCustomOption","import","whitelist","register","bounds","body","formats","scrollingContainer","theme","content","setContents","setText","contents","history","clear","setDisabledState","emit","selectionChangeEvent","on","range","oldRange","source","run","editor","onModelTouched","textChangeEvent","delta","oldDelta","text","onModelChange","ngOnDestroy","removeListener","ngOnChanges","changes","enable","currentValue","root","dataset","currentStyling","previousStyling","previousValue","removeStyle","writeValue","isDisabled","disable","setAttribute","removeAttribute","registerOnChange","fn","registerOnTouched","validate","err","valid","textLength","length","minLength","minLengthError","given","maxLength","maxLengthError","required","requiredError","empty","Component","args","encapsulation","ViewEncapsulation","None","providers","multi","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","selector","template","ElementRef","DomSanitizer","Inject","DOCUMENT","decorators","type","PLATFORM_ID","Renderer2","NgZone","Input","Output","toolbar","header","list","script","indent","direction","size","color","slice","background","font","align","QuillModule","forRoot","ngModule","useValue","NgModule","declarations","exports","imports","Éµ0"],"mappings":"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","sourcesContent":["import { isPlatformServer } from '@angular/common'\nimport { DomSanitizer } from '@angular/platform-browser'\n\nimport { QuillConfig, QuillModules } from './quill-editor.interfaces'\n\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  PLATFORM_ID,\n  Renderer2,\n  SecurityContext,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core'\n\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  Validator\n} from '@angular/forms'\n\nimport { DOCUMENT } from '@angular/common'\n\n// import * as QuillNamespace from 'quill'\n// Because quill uses `document` directly, we cannot `import` during SSR\n// instead, we load dynamically via `require('quill')` in `ngAfterViewInit()`\ndeclare var require: any\n// tslint:disable-next-line:variable-name\nlet Quill: any = null\n\nexport interface CustomOption {\n  import: string\n  whitelist: any[]\n}\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => QuillEditorComponent)\n    },\n    {\n      multi: true,\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => QuillEditorComponent)\n    }\n  ],\n  selector: 'quill-editor',\n  template: `\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n`\n})\nexport class QuillEditorComponent\n  implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {\n\n  quillEditor: any\n  editorElem: HTMLElement\n  emptyArray: any[] = []\n  content: any\n  selectionChangeEvent: any\n  textChangeEvent: any\n  defaultModules: QuillModules | {}\n\n  onModelChange: any\n  onModelTouched: any\n\n  @Input() format: 'object' | 'html' | 'text' | 'json' = 'html'\n  @Input() theme: string\n  // tslint:disable-next-line:ban-types\n  @Input() modules: { [index: string]: Object }\n  @Input() readOnly: boolean = false\n  @Input() placeholder: string\n  @Input() maxLength: number\n  @Input() minLength: number\n  @Input() required: boolean\n  @Input() formats: string[]\n  @Input() sanitize: boolean = false\n  @Input() style: any = {}\n  @Input() strict: boolean = true\n  @Input() scrollingContainer: HTMLElement | string\n  @Input() bounds: HTMLElement | string\n  @Input() customOptions: CustomOption[] = []\n\n  @Output() onEditorCreated: EventEmitter<any> = new EventEmitter()\n  @Output() onContentChanged: EventEmitter<any> = new EventEmitter()\n  @Output() onSelectionChanged: EventEmitter<any> = new EventEmitter()\n\n  private disabled = false // used to store initial value before ViewInit\n\n  constructor(\n    private elementRef: ElementRef,\n    private domSanitizer: DomSanitizer,\n    @Inject(DOCUMENT) private doc: any,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private renderer: Renderer2,\n    private zone: NgZone,\n    @Inject('config') private config: QuillConfig\n  ) {\n    this.defaultModules = this.config && this.config.modules || {}\n  }\n\n  @Input()\n  valueGetter = (quillEditor: any, editorElement: HTMLElement): any => {\n    let html: string | null = editorElement.children[0].innerHTML\n    if (html === '<p><br></p>' || html === '<div><br><div>') {\n      html = null\n    }\n    let modelValue = html\n\n    if (this.format === 'text') {\n      modelValue = quillEditor.getText()\n    } else if (this.format === 'object') {\n      modelValue = quillEditor.getContents()\n    } else if (this.format === 'json') {\n      try {\n        modelValue = JSON.stringify(quillEditor.getContents())\n      } catch (e) {\n        modelValue = quillEditor.getText()\n      }\n    }\n\n    return modelValue\n  }\n\n  @Input()\n  valueSetter = (quillEditor: any, value: any): any => {\n    if (this.format === 'html') {\n      if (this.sanitize) {\n        value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n      }\n      return quillEditor.clipboard.convert(value)\n    } else if (this.format === 'json') {\n      try {\n        return JSON.parse(value)\n      } catch (e) {\n        return [{ insert: value }]\n      }\n    }\n\n    return value\n  }\n\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return\n    }\n    if (!Quill) {\n      Quill = require('quill')\n    }\n\n    const toolbarElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-toolbar]'\n    )\n    const modules = this.modules || this.defaultModules\n    let placeholder = 'Insert text here ...'\n\n    if (this.placeholder !== null && this.placeholder !== undefined) {\n      placeholder = this.placeholder.trim()\n    }\n\n    if (toolbarElem) {\n      // tslint:disable-next-line:no-string-literal\n      modules['toolbar'] = toolbarElem\n    }\n    this.elementRef.nativeElement.insertAdjacentHTML(\n      'beforeend',\n      '<div quill-editor-element></div>'\n    )\n    this.editorElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-element]'\n    )\n\n    if (this.style) {\n      Object.keys(this.style).forEach((key: string) => {\n        this.renderer.setStyle(this.editorElem, key, this.style[key])\n      })\n    }\n\n    this.customOptions.forEach((customOption) => {\n      const newCustomOption = Quill.import(customOption.import)\n      newCustomOption.whitelist = customOption.whitelist\n      Quill.register(newCustomOption, true)\n    })\n\n    this.quillEditor = new Quill(this.editorElem, {\n      bounds: this.bounds ? (this.bounds === 'self' ? this.editorElem : this.bounds) : this.doc.body,\n      formats: this.formats,\n      modules,\n      placeholder,\n      readOnly: this.readOnly,\n      scrollingContainer: this.scrollingContainer,\n      strict: this.strict,\n      theme: this.theme || 'snow'\n    })\n\n    if (this.content) {\n      if (this.format === 'object') {\n        this.quillEditor.setContents(this.content, 'silent')\n      } else if (this.format === 'text') {\n        this.quillEditor.setText(this.content, 'silent')\n      } else if (this.format === 'json') {\n        try {\n          this.quillEditor.setContents(JSON.parse(this.content), 'silent')\n        } catch (e) {\n          this.quillEditor.setText(this.content, 'silent')\n        }\n      } else {\n        if (this.sanitize) {\n          this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content)\n        }\n        const contents = this.quillEditor.clipboard.convert(this.content)\n        this.quillEditor.setContents(contents, 'silent')\n      }\n\n      this.quillEditor.history.clear()\n    }\n\n    // initialize disabled status based on this.disabled as default value\n    this.setDisabledState()\n\n    this.onEditorCreated.emit(this.quillEditor)\n\n    // mark model as touched if editor lost focus\n    this.selectionChangeEvent = this.quillEditor.on(\n      'selection-change',\n      (range: any, oldRange: any, source: string) => {\n        this.zone.run(() => {\n          this.onSelectionChanged.emit({\n            editor: this.quillEditor,\n            oldRange,\n            range,\n            source\n          })\n\n          if (!range && this.onModelTouched) {\n            this.onModelTouched()\n          }\n        })\n      }\n    )\n\n    // update model if text changes\n    this.textChangeEvent = this.quillEditor.on(\n      'text-change',\n      (delta: any, oldDelta: any, source: string): void => {\n        // only emit changes emitted by user interactions\n\n        const text = this.quillEditor.getText()\n        const content = this.quillEditor.getContents()\n\n        let html: string | null = this.editorElem.children[0].innerHTML\n        if (html === '<p><br></p>' || html === '<div><br><div>') {\n          html = null\n        }\n\n        this.zone.run(() => {\n          if (source === 'user' && this.onModelChange) {\n            this.onModelChange(\n              this.valueGetter(this.quillEditor, this.editorElem)\n            )\n          }\n\n          this.onContentChanged.emit({\n            content,\n            delta,\n            editor: this.quillEditor,\n            html,\n            oldDelta,\n            source,\n            text\n          })\n        })\n      }\n    )\n  }\n\n  ngOnDestroy() {\n    if (this.selectionChangeEvent) {\n      this.selectionChangeEvent.removeListener('selection-change')\n    }\n    if (this.textChangeEvent) {\n      this.textChangeEvent.removeListener('text-change')\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.quillEditor) {\n      return\n    }\n    // tslint:disable:no-string-literal\n    if (changes['readOnly']) {\n      this.quillEditor.enable(!changes['readOnly'].currentValue)\n    }\n    if (changes['placeholder']) {\n      this.quillEditor.root.dataset.placeholder =\n        changes['placeholder'].currentValue\n    }\n    if (changes['style']) {\n      const currentStyling = changes['style'].currentValue\n      const previousStyling = changes['style'].previousValue\n\n      if (previousStyling) {\n        Object.keys(previousStyling).forEach((key: string) => {\n          this.renderer.removeStyle(this.editorElem, key)\n        })\n      }\n      if (currentStyling) {\n        Object.keys(currentStyling).forEach((key: string) => {\n          this.renderer.setStyle(this.editorElem, key, this.style[key])\n        })\n      }\n    }\n    // tslint:enable:no-string-literal\n  }\n\n  writeValue(currentValue: any) {\n    this.content = currentValue\n\n    if (this.quillEditor) {\n      if (currentValue) {\n        if (this.format === 'text') {\n          this.quillEditor.setText(currentValue)\n        } else {\n          this.quillEditor.setContents(\n            this.valueSetter(this.quillEditor, this.content)\n          )\n        }\n        return\n      }\n      this.quillEditor.setText('')\n    }\n  }\n\n  setDisabledState(isDisabled: boolean = this.disabled): void {\n    // store initial value to set appropriate disabled status after ViewInit\n    this.disabled = isDisabled\n    if (this.quillEditor) {\n      if (isDisabled) {\n        this.quillEditor.disable()\n        this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled')\n      } else {\n        if (!this.readOnly) {\n          this.quillEditor.enable()\n        }\n        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled')\n      }\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn\n  }\n\n  validate() {\n    if (!this.quillEditor) {\n      return null\n    }\n\n    const err: {\n      minLengthError?: {\n        given: number\n        minLength: number\n      }\n      maxLengthError?: {\n        given: number\n        maxLength: number\n      }\n      requiredError?: { empty: boolean }\n    } = {}\n    let valid = true\n\n    const textLength = this.quillEditor.getText().trim().length\n\n    if (this.minLength && textLength && textLength < this.minLength) {\n      err.minLengthError = {\n        given: textLength,\n        minLength: this.minLength\n      }\n\n      valid = false\n    }\n\n    if (this.maxLength && textLength > this.maxLength) {\n      err.maxLengthError = {\n        given: textLength,\n        maxLength: this.maxLength\n      }\n\n      valid = false\n    }\n\n    if (this.required && !textLength) {\n      err.requiredError = {\n        empty: true\n      }\n\n      valid = false\n    }\n\n    return valid ? null : err\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core'\n\nimport { QuillEditorComponent } from './quill-editor.component'\nimport { QuillConfig } from './quill-editor.interfaces'\n\nconst emptyArray: any[] = []\nconst defaultModules = {\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n    ['blockquote', 'code-block'],\n\n    [{ header: 1 }, { header: 2 }], // custom button values\n    [{ list: 'ordered' }, { list: 'bullet' }],\n    [{ script: 'sub' }, { script: 'super' }], // superscript/subscript\n    [{ indent: '-1' }, { indent: '+1' }], // outdent/indent\n    [{ direction: 'rtl' }], // text direction\n\n    [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n\n    [\n      { color: emptyArray.slice() },\n      { background: emptyArray.slice() }\n    ], // dropdown with defaults from theme\n    [{ font: emptyArray.slice() }],\n    [{ align: emptyArray.slice() }],\n\n    ['clean'], // remove formatting button\n\n    ['link', 'image', 'video'] // link and image, video\n  ]\n}\n\n@NgModule({\n  declarations: [\n    QuillEditorComponent\n  ],\n  exports: [QuillEditorComponent],\n  imports: [],\n  providers: [\n    {\n      provide: 'config',\n      useValue: defaultModules\n    }\n  ]\n})\nexport class QuillModule {\n  static forRoot(config?: QuillConfig): ModuleWithProviders {\n    return {\n      ngModule: QuillModule,\n      providers: [\n        {\n          provide: 'config',\n          useValue: config ||ÃÂ defaultModules\n        }\n      ]\n    }\n  }\n}\n"]}