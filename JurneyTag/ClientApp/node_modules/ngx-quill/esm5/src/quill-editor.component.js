/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { isPlatformServer } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Output, PLATFORM_ID, Renderer2, SecurityContext, ViewEncapsulation } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
// tslint:disable-next-line:variable-name
/** @type {?} */
var Quill = null;
/**
 * @record
 */
export function CustomOption() { }
if (false) {
    /** @type {?} */
    CustomOption.prototype.import;
    /** @type {?} */
    CustomOption.prototype.whitelist;
}
var QuillEditorComponent = /** @class */ (function () {
    function QuillEditorComponent(elementRef, domSanitizer, doc, platformId, renderer, zone, config) {
        var _this = this;
        this.elementRef = elementRef;
        this.domSanitizer = domSanitizer;
        this.doc = doc;
        this.platformId = platformId;
        this.renderer = renderer;
        this.zone = zone;
        this.config = config;
        this.emptyArray = [];
        this.format = 'html';
        this.readOnly = false;
        this.sanitize = false;
        this.style = {};
        this.strict = true;
        this.customOptions = [];
        this.onEditorCreated = new EventEmitter();
        this.onContentChanged = new EventEmitter();
        this.onSelectionChanged = new EventEmitter();
        this.disabled = false; // used to store initial value before ViewInit
        this.valueGetter = function (quillEditor, editorElement) {
            /** @type {?} */
            var html = editorElement.children[0].innerHTML;
            if (html === '<p><br></p>' || html === '<div><br><div>') {
                html = null;
            }
            /** @type {?} */
            var modelValue = html;
            if (_this.format === 'text') {
                modelValue = quillEditor.getText();
            }
            else if (_this.format === 'object') {
                modelValue = quillEditor.getContents();
            }
            else if (_this.format === 'json') {
                try {
                    modelValue = JSON.stringify(quillEditor.getContents());
                }
                catch (e) {
                    modelValue = quillEditor.getText();
                }
            }
            return modelValue;
        };
        this.valueSetter = function (quillEditor, value) {
            if (_this.format === 'html') {
                if (_this.sanitize) {
                    value = _this.domSanitizer.sanitize(SecurityContext.HTML, value);
                }
                return quillEditor.clipboard.convert(value);
            }
            else if (_this.format === 'json') {
                try {
                    return JSON.parse(value);
                }
                catch (e) {
                    return [{ insert: value }];
                }
            }
            return value;
        };
        this.defaultModules = this.config && this.config.modules || {};
    }
    /**
     * @return {?}
     */
    QuillEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformServer(this.platformId)) {
            return;
        }
        if (!Quill) {
            Quill = require('quill');
        }
        /** @type {?} */
        var toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');
        /** @type {?} */
        var modules = this.modules || this.defaultModules;
        /** @type {?} */
        var placeholder = 'Insert text here ...';
        if (this.placeholder !== null && this.placeholder !== undefined) {
            placeholder = this.placeholder.trim();
        }
        if (toolbarElem) {
            // tslint:disable-next-line:no-string-literal
            modules['toolbar'] = toolbarElem;
        }
        this.elementRef.nativeElement.insertAdjacentHTML('beforeend', '<div quill-editor-element></div>');
        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');
        if (this.style) {
            Object.keys(this.style).forEach(function (key) {
                _this.renderer.setStyle(_this.editorElem, key, _this.style[key]);
            });
        }
        this.customOptions.forEach(function (customOption) {
            /** @type {?} */
            var newCustomOption = Quill.import(customOption.import);
            newCustomOption.whitelist = customOption.whitelist;
            Quill.register(newCustomOption, true);
        });
        this.quillEditor = new Quill(this.editorElem, {
            bounds: this.bounds ? (this.bounds === 'self' ? this.editorElem : this.bounds) : this.doc.body,
            formats: this.formats,
            modules: modules,
            placeholder: placeholder,
            readOnly: this.readOnly,
            scrollingContainer: this.scrollingContainer,
            strict: this.strict,
            theme: this.theme || 'snow'
        });
        if (this.content) {
            if (this.format === 'object') {
                this.quillEditor.setContents(this.content, 'silent');
            }
            else if (this.format === 'text') {
                this.quillEditor.setText(this.content, 'silent');
            }
            else if (this.format === 'json') {
                try {
                    this.quillEditor.setContents(JSON.parse(this.content), 'silent');
                }
                catch (e) {
                    this.quillEditor.setText(this.content, 'silent');
                }
            }
            else {
                if (this.sanitize) {
                    this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);
                }
                /** @type {?} */
                var contents = this.quillEditor.clipboard.convert(this.content);
                this.quillEditor.setContents(contents, 'silent');
            }
            this.quillEditor.history.clear();
        }
        // initialize disabled status based on this.disabled as default value
        this.setDisabledState();
        this.onEditorCreated.emit(this.quillEditor);
        // mark model as touched if editor lost focus
        this.selectionChangeEvent = this.quillEditor.on('selection-change', function (range, oldRange, source) {
            _this.zone.run(function () {
                _this.onSelectionChanged.emit({
                    editor: _this.quillEditor,
                    oldRange: oldRange,
                    range: range,
                    source: source
                });
                if (!range && _this.onModelTouched) {
                    _this.onModelTouched();
                }
            });
        });
        // update model if text changes
        this.textChangeEvent = this.quillEditor.on('text-change', function (delta, oldDelta, source) {
            // only emit changes emitted by user interactions
            // only emit changes emitted by user interactions
            /** @type {?} */
            var text = _this.quillEditor.getText();
            /** @type {?} */
            var content = _this.quillEditor.getContents();
            /** @type {?} */
            var html = _this.editorElem.children[0].innerHTML;
            if (html === '<p><br></p>' || html === '<div><br><div>') {
                html = null;
            }
            _this.zone.run(function () {
                if (source === 'user' && _this.onModelChange) {
                    _this.onModelChange(_this.valueGetter(_this.quillEditor, _this.editorElem));
                }
                _this.onContentChanged.emit({
                    content: content,
                    delta: delta,
                    editor: _this.quillEditor,
                    html: html,
                    oldDelta: oldDelta,
                    source: source,
                    text: text
                });
            });
        });
    };
    /**
     * @return {?}
     */
    QuillEditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.selectionChangeEvent) {
            this.selectionChangeEvent.removeListener('selection-change');
        }
        if (this.textChangeEvent) {
            this.textChangeEvent.removeListener('text-change');
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    QuillEditorComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (!this.quillEditor) {
            return;
        }
        // tslint:disable:no-string-literal
        if (changes['readOnly']) {
            this.quillEditor.enable(!changes['readOnly'].currentValue);
        }
        if (changes['placeholder']) {
            this.quillEditor.root.dataset.placeholder =
                changes['placeholder'].currentValue;
        }
        if (changes['style']) {
            /** @type {?} */
            var currentStyling = changes['style'].currentValue;
            /** @type {?} */
            var previousStyling = changes['style'].previousValue;
            if (previousStyling) {
                Object.keys(previousStyling).forEach(function (key) {
                    _this.renderer.removeStyle(_this.editorElem, key);
                });
            }
            if (currentStyling) {
                Object.keys(currentStyling).forEach(function (key) {
                    _this.renderer.setStyle(_this.editorElem, key, _this.style[key]);
                });
            }
        }
        // tslint:enable:no-string-literal
    };
    /**
     * @param {?} currentValue
     * @return {?}
     */
    QuillEditorComponent.prototype.writeValue = /**
     * @param {?} currentValue
     * @return {?}
     */
    function (currentValue) {
        this.content = currentValue;
        if (this.quillEditor) {
            if (currentValue) {
                if (this.format === 'text') {
                    this.quillEditor.setText(currentValue);
                }
                else {
                    this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));
                }
                return;
            }
            this.quillEditor.setText('');
        }
    };
    /**
     * @param {?=} isDisabled
     * @return {?}
     */
    QuillEditorComponent.prototype.setDisabledState = /**
     * @param {?=} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        if (isDisabled === void 0) { isDisabled = this.disabled; }
        // store initial value to set appropriate disabled status after ViewInit
        this.disabled = isDisabled;
        if (this.quillEditor) {
            if (isDisabled) {
                this.quillEditor.disable();
                this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');
            }
            else {
                if (!this.readOnly) {
                    this.quillEditor.enable();
                }
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    QuillEditorComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    QuillEditorComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @return {?}
     */
    QuillEditorComponent.prototype.validate = /**
     * @return {?}
     */
    function () {
        if (!this.quillEditor) {
            return null;
        }
        /** @type {?} */
        var err = {};
        /** @type {?} */
        var valid = true;
        /** @type {?} */
        var textLength = this.quillEditor.getText().trim().length;
        if (this.minLength && textLength && textLength < this.minLength) {
            err.minLengthError = {
                given: textLength,
                minLength: this.minLength
            };
            valid = false;
        }
        if (this.maxLength && textLength > this.maxLength) {
            err.maxLengthError = {
                given: textLength,
                maxLength: this.maxLength
            };
            valid = false;
        }
        if (this.required && !textLength) {
            err.requiredError = {
                empty: true
            };
            valid = false;
        }
        return valid ? null : err;
    };
    QuillEditorComponent.decorators = [
        { type: Component, args: [{
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return QuillEditorComponent; })
                        },
                        {
                            multi: true,
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return QuillEditorComponent; })
                        }
                    ],
                    selector: 'quill-editor',
                    template: "\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n"
                }] }
    ];
    QuillEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomSanitizer },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Renderer2 },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: ['config',] }] }
    ]; };
    QuillEditorComponent.propDecorators = {
        format: [{ type: Input }],
        theme: [{ type: Input }],
        modules: [{ type: Input }],
        readOnly: [{ type: Input }],
        placeholder: [{ type: Input }],
        maxLength: [{ type: Input }],
        minLength: [{ type: Input }],
        required: [{ type: Input }],
        formats: [{ type: Input }],
        sanitize: [{ type: Input }],
        style: [{ type: Input }],
        strict: [{ type: Input }],
        scrollingContainer: [{ type: Input }],
        bounds: [{ type: Input }],
        customOptions: [{ type: Input }],
        onEditorCreated: [{ type: Output }],
        onContentChanged: [{ type: Output }],
        onSelectionChanged: [{ type: Output }],
        valueGetter: [{ type: Input }],
        valueSetter: [{ type: Input }]
    };
    return QuillEditorComponent;
}());
export { QuillEditorComponent };
if (false) {
    /** @type {?} */
    QuillEditorComponent.prototype.quillEditor;
    /** @type {?} */
    QuillEditorComponent.prototype.editorElem;
    /** @type {?} */
    QuillEditorComponent.prototype.emptyArray;
    /** @type {?} */
    QuillEditorComponent.prototype.content;
    /** @type {?} */
    QuillEditorComponent.prototype.selectionChangeEvent;
    /** @type {?} */
    QuillEditorComponent.prototype.textChangeEvent;
    /** @type {?} */
    QuillEditorComponent.prototype.defaultModules;
    /** @type {?} */
    QuillEditorComponent.prototype.onModelChange;
    /** @type {?} */
    QuillEditorComponent.prototype.onModelTouched;
    /** @type {?} */
    QuillEditorComponent.prototype.format;
    /** @type {?} */
    QuillEditorComponent.prototype.theme;
    /** @type {?} */
    QuillEditorComponent.prototype.modules;
    /** @type {?} */
    QuillEditorComponent.prototype.readOnly;
    /** @type {?} */
    QuillEditorComponent.prototype.placeholder;
    /** @type {?} */
    QuillEditorComponent.prototype.maxLength;
    /** @type {?} */
    QuillEditorComponent.prototype.minLength;
    /** @type {?} */
    QuillEditorComponent.prototype.required;
    /** @type {?} */
    QuillEditorComponent.prototype.formats;
    /** @type {?} */
    QuillEditorComponent.prototype.sanitize;
    /** @type {?} */
    QuillEditorComponent.prototype.style;
    /** @type {?} */
    QuillEditorComponent.prototype.strict;
    /** @type {?} */
    QuillEditorComponent.prototype.scrollingContainer;
    /** @type {?} */
    QuillEditorComponent.prototype.bounds;
    /** @type {?} */
    QuillEditorComponent.prototype.customOptions;
    /** @type {?} */
    QuillEditorComponent.prototype.onEditorCreated;
    /** @type {?} */
    QuillEditorComponent.prototype.onContentChanged;
    /** @type {?} */
    QuillEditorComponent.prototype.onSelectionChanged;
    /** @type {?} */
    QuillEditorComponent.prototype.disabled;
    /** @type {?} */
    QuillEditorComponent.prototype.valueGetter;
    /** @type {?} */
    QuillEditorComponent.prototype.valueSetter;
    /** @type {?} */
    QuillEditorComponent.prototype.elementRef;
    /** @type {?} */
    QuillEditorComponent.prototype.domSanitizer;
    /** @type {?} */
    QuillEditorComponent.prototype.doc;
    /** @type {?} */
    QuillEditorComponent.prototype.platformId;
    /** @type {?} */
    QuillEditorComponent.prototype.renderer;
    /** @type {?} */
    QuillEditorComponent.prototype.zone;
    /** @type {?} */
    QuillEditorComponent.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,