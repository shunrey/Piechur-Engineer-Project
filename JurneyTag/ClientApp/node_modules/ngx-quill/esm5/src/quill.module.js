/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { QuillEditorComponent } from './quill-editor.component';
/** @type {?} */
var emptyArray = [];
/** @type {?} */
var defaultModules = {
    toolbar: [
        ['bold', 'italic', 'underline', 'strike'],
        ['blockquote', 'code-block'],
        [{ header: 1 }, { header: 2 }],
        [{ list: 'ordered' }, { list: 'bullet' }],
        [{ script: 'sub' }, { script: 'super' }],
        [{ indent: '-1' }, { indent: '+1' }],
        [{ direction: 'rtl' }],
        [{ size: ['small', false, 'large', 'huge'] }],
        [{ header: [1, 2, 3, 4, 5, 6, false] }],
        [
            { color: emptyArray.slice() },
            { background: emptyArray.slice() }
        ],
        [{ font: emptyArray.slice() }],
        [{ align: emptyArray.slice() }],
        ['clean'],
        ['link', 'image', 'video'] // link and image, video
    ]
};
var ɵ0 = defaultModules;
var QuillModule = /** @class */ (function () {
    function QuillModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    QuillModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: QuillModule,
            providers: [
                {
                    provide: 'config',
                    useValue: config || defaultModules
                }
            ]
        };
    };
    QuillModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        QuillEditorComponent
                    ],
                    exports: [QuillEditorComponent],
                    imports: [],
                    providers: [
                        {
                            provide: 'config',
                            useValue: ɵ0
                        }
                    ]
                },] }
    ];
    return QuillModule;
}());
export { QuillModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXF1aWxsLyIsInNvdXJjZXMiOlsic3JjL3F1aWxsLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUE7O0lBR3pELFVBQVUsR0FBVSxFQUFFOztJQUN0QixjQUFjLEdBQUc7SUFDckIsT0FBTyxFQUFFO1FBQ1AsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUM7UUFDekMsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDO1FBRTVCLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDOUIsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQztRQUN6QyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3hDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDcEMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUV0QixDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUM3QyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUV2QztZQUNFLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUM3QixFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUU7U0FDbkM7UUFDRCxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1FBQzlCLENBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7UUFFL0IsQ0FBQyxPQUFPLENBQUM7UUFFVCxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsd0JBQXdCO0tBQ3BEO0NBQ0Y7U0FXZSxjQUFjO0FBVDlCO0lBQUE7SUF5QkEsQ0FBQzs7Ozs7SUFYUSxtQkFBTzs7OztJQUFkLFVBQWUsTUFBb0I7UUFDakMsTUFBTSxDQUFDO1lBQ0wsUUFBUSxFQUFFLFdBQVc7WUFDckIsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxRQUFRO29CQUNqQixRQUFRLEVBQUUsTUFBTSxJQUFJLGNBQWM7aUJBQ25DO2FBQ0Y7U0FDRixDQUFBO0lBQ0gsQ0FBQzs7Z0JBeEJGLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUU7d0JBQ1osb0JBQW9CO3FCQUNyQjtvQkFDRCxPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDL0IsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxRQUFROzRCQUNqQixRQUFRLElBQWdCO3lCQUN6QjtxQkFDRjtpQkFDRjs7SUFhRCxrQkFBQztDQUFBLEFBekJELElBeUJDO1NBWlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuaW1wb3J0IHsgUXVpbGxFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL3F1aWxsLWVkaXRvci5jb21wb25lbnQnXG5pbXBvcnQgeyBRdWlsbENvbmZpZyB9IGZyb20gJy4vcXVpbGwtZWRpdG9yLmludGVyZmFjZXMnXG5cbmNvbnN0IGVtcHR5QXJyYXk6IGFueVtdID0gW11cbmNvbnN0IGRlZmF1bHRNb2R1bGVzID0ge1xuICB0b29sYmFyOiBbXG4gICAgWydib2xkJywgJ2l0YWxpYycsICd1bmRlcmxpbmUnLCAnc3RyaWtlJ10sIC8vIHRvZ2dsZWQgYnV0dG9uc1xuICAgIFsnYmxvY2txdW90ZScsICdjb2RlLWJsb2NrJ10sXG5cbiAgICBbeyBoZWFkZXI6IDEgfSwgeyBoZWFkZXI6IDIgfV0sIC8vIGN1c3RvbSBidXR0b24gdmFsdWVzXG4gICAgW3sgbGlzdDogJ29yZGVyZWQnIH0sIHsgbGlzdDogJ2J1bGxldCcgfV0sXG4gICAgW3sgc2NyaXB0OiAnc3ViJyB9LCB7IHNjcmlwdDogJ3N1cGVyJyB9XSwgLy8gc3VwZXJzY3JpcHQvc3Vic2NyaXB0XG4gICAgW3sgaW5kZW50OiAnLTEnIH0sIHsgaW5kZW50OiAnKzEnIH1dLCAvLyBvdXRkZW50L2luZGVudFxuICAgIFt7IGRpcmVjdGlvbjogJ3J0bCcgfV0sIC8vIHRleHQgZGlyZWN0aW9uXG5cbiAgICBbeyBzaXplOiBbJ3NtYWxsJywgZmFsc2UsICdsYXJnZScsICdodWdlJ10gfV0sIC8vIGN1c3RvbSBkcm9wZG93blxuICAgIFt7IGhlYWRlcjogWzEsIDIsIDMsIDQsIDUsIDYsIGZhbHNlXSB9XSxcblxuICAgIFtcbiAgICAgIHsgY29sb3I6IGVtcHR5QXJyYXkuc2xpY2UoKSB9LFxuICAgICAgeyBiYWNrZ3JvdW5kOiBlbXB0eUFycmF5LnNsaWNlKCkgfVxuICAgIF0sIC8vIGRyb3Bkb3duIHdpdGggZGVmYXVsdHMgZnJvbSB0aGVtZVxuICAgIFt7IGZvbnQ6IGVtcHR5QXJyYXkuc2xpY2UoKSB9XSxcbiAgICBbeyBhbGlnbjogZW1wdHlBcnJheS5zbGljZSgpIH1dLFxuXG4gICAgWydjbGVhbiddLCAvLyByZW1vdmUgZm9ybWF0dGluZyBidXR0b25cblxuICAgIFsnbGluaycsICdpbWFnZScsICd2aWRlbyddIC8vIGxpbmsgYW5kIGltYWdlLCB2aWRlb1xuICBdXG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFF1aWxsRWRpdG9yQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtRdWlsbEVkaXRvckNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiAnY29uZmlnJyxcbiAgICAgIHVzZVZhbHVlOiBkZWZhdWx0TW9kdWxlc1xuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBRdWlsbE1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZz86IFF1aWxsQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBRdWlsbE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogJ2NvbmZpZycsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZyB8fMKgZGVmYXVsdE1vZHVsZXNcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfVxufVxuIl19